// Generated by CoffeeScript 1.3.3
(function() {
  var DAY_NAMES, MONTH_NAMES, data;

  MONTH_NAMES = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];

  DAY_NAMES = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  data = [
    {
      name: 'Leon',
      offset: -new Date().getTimezoneOffset() / 60,
      availability: "13-23",
      country: 'RU'
    }, {
      name: 'Jeff Lawrence',
      offset: -6,
      availability: "8-23",
      country: "CA"
    }, {
      name: 'Shawn',
      offset: -6,
      availability: "8-20",
      country: "CA"
    }, {
      name: 'Vladimir Zheleznyak',
      offset: 3,
      country: "UA"
    }, {
      name: 'Adrian',
      offset: 3,
      country: "RO"
    }, {
      name: 'Luke',
      offset: -6,
      availability: "8-17",
      country: "CA"
    }, {
      name: 'Kyle',
      offset: -6,
      availability: "8-17",
      days: [1, 2, 4],
      country: "CA"
    }, {
      name: 'Sergey',
      offset: 3,
      country: "UA"
    }, {
      name: 'Raresh',
      offset: 2,
      availability: "15-21",
      country: "RO"
    }
  ];

  Date.prototype.stripTime = function() {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate());
  };

  this.Calendar = (function() {

    function Calendar() {
      this.current_user = data[0];
    }

    Calendar.prototype.setViewDate = function(date) {
      return this.date = date;
    };

    Calendar.prototype.getZoneData = function(data, offset) {
      var sorted,
        _this = this;
      sorted = _.sortBy(data, function(p) {
        return _this.current_user.offset - p.offset;
      });
      sorted.splice(0, 0, this.current_user);
      return sorted;
    };

    Calendar.prototype.formatHour = function(hour) {
      if (hour > 24) {
        return hour - parseInt(hour / 24) * 24;
      } else if (hour < 0) {
        return 24 + hour;
      } else if (hour === 24) {
        return 0;
      } else {
        return hour;
      }
    };

    Calendar.prototype.isAvailableHour = function(hour, availability) {
      var a, available, _i, _len;
      if (availability) {
        availability = _(availability.split(',')).map(function(a) {
          return a.split('-');
        });
      } else {
        availability = [[10, 20]];
      }
      for (_i = 0, _len = availability.length; _i < _len; _i++) {
        a = availability[_i];
        if (a.length > 1) {
          if (hour >= a[0] && hour < a[1]) {
            available = true;
          }
        } else {
          if (hour === a[0]) {
            available = true;
          }
        }
      }
      return available;
    };

    Calendar.prototype.isAvailableDay = function(day, availability) {
      if (availability) {
        return availability = [];
      }
    };

    Calendar.prototype.drawZones = function(date) {
      var hours, zone_data,
        _this = this;
      if (date == null) {
        date = this.date;
      }
      zone_data = this.getZoneData(data, this.current_user.offset);
      hours = d3.range(0, 24 * 7, 1);
      d3.select("#timezone_table").append("table").attr("class", "table").selectAll("tr").data(zone_data).enter().append("tr").selectAll("td").data(function(row, i) {
        var list;
        list = hours.map(function(h) {
          return {
            date: new Date(+date + h * 3600 * 1000 - _this.current_user.offset * 3600 * 1000 + row.offset * 3600 * 1000),
            obj: row
          };
        });
        list.splice(0, 0, row.name);
        return list;
      }).enter().append("td").attr("class", function(d, i) {
        var available_days, classes, hour;
        if (i !== 0) {
          hour = d.date.getHours();
          classes = ["hour_" + hour, "idx_" + i];
          if (_this.isAvailableHour(hour, d.obj.availability)) {
            classes.push("available");
          } else {
            classes.push("dnd");
          }
          available_days = d.obj.days || [1, 2, 3, 4, 5];
          if (!_(available_days).include(d.date.getDay())) {
            classes.push("holiday");
          } else {
            classes.push("regular");
          }
          return classes.join(' ');
        }
      }).on("mouseover", function(d, i) {
        return $("#timezone_table .idx_" + i).addClass("selected");
      }).on("mouseout", function(d, i) {
        return $("#timezone_table td.selected").removeClass("selected");
      }).append("div").text(function(d, i) {
        var hour;
        if (i) {
          hour = d.date.getHours();
          if (hour === 0) {
            return MONTH_NAMES[d.date.getMonth()] + "\n" + d.date.getDate();
          } else {
            return hour;
          }
        } else {
          return d;
        }
      }).attr("title", function(d, i) {
        if (i) {
          return d.date.toString();
        } else {
          return d;
        }
      });
      return $("#timezone_table .idx_1").addClass("selected");
    };

    Calendar.prototype.drawWeeks = function(date) {
      var colors, country, day, days, formatDate, idx, last_sunday, _ref, _results,
        _this = this;
      if (date == null) {
        date = this.date;
      }
      $("#calendar").html('');
      date = date.stripTime();
      last_sunday = d3.time.sunday(date);
      days = d3.time.days(d3.time.sunday(date), last_sunday.setDate(last_sunday.getDate() + 7 * 6));
      formatDate = function(date) {
        return date.toLocaleDateString();
      };
      d3.select("#calendar").selectAll('h2').data([+days[0]]).enter().append('h2').html(function(d) {
        return "From <span>" + (days[0].toLocaleDateString()) + "</span> to <span>" + (days[days.length - 1].toLocaleDateString()) + "</span><a id='next'>→</a><a id='prev'>←</a>";
      });
      $('#next').unbind().click(function() {
        return _this.drawWeeks(days[days.length - 1]);
      });
      $('#prev').unbind().click(function() {
        days[0].setDate(days[0].getDate() - 7 * 6);
        return _this.drawWeeks(days[0]);
      });
      d3.select("#calendar").selectAll('div.header').data(d3.range(0, 7)).enter().append('div').attr('class', function(d) {
        return "header col_" + d;
      }).text(function(d) {
        return DAY_NAMES[d];
      });
      d3.select("#calendar").selectAll('div.day').data(days).enter().append('div').attr("class", function(d, i) {
        var classes, col, row;
        row = parseInt(i / 7);
        col = i % 7;
        classes = "day row_" + row + " col_" + col;
        if ((+d) === (+date)) {
          classes += " current";
        }
        classes += " " + (+d);
        return classes;
      }).text(function(d) {
        return d.getDate();
      });
      colors = d3.scale.category20();
      $('#calendar .holiday').remove();
      _ref = _.uniq(_.map(data, function(el) {
        return el.country;
      }));
      _results = [];
      for (idx in _ref) {
        country = _ref[idx];
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = days.length; _i < _len; _i++) {
            day = days[_i];
            _results1.push((function(day, country, idx) {
              return Holidays.isHoliday(day, country, function(day_info) {
                var holiday, _ref1;
                if (day_info) {
                  holiday = $('<a rel="tooltip" class="holiday"></a>');
                  holiday.attr('data-country', country);
                  holiday.attr('title', "" + countries[country].name + " - " + day_info.name);
                  holiday.attr('data-type', day_info.type);
                  holiday.css('background-color', colors(idx));
                  holiday.text(day_info.name);
                  holiday.tooltip();
                  if ((_ref1 = day_info.type) === 'Muslim' || _ref1 === 'Christian' || _ref1 === 'Clock change/Daylight Saving Time' || _ref1 === 'Observance' || _ref1 === 'Orthodox' || _ref1 === 'season' || _ref1 === 'Jewish holiday' || _ref1 === 'Local holiday' || _ref1 === 'Season' || _ref1 === 'Local observance') {
                    holiday.hide();
                  }
                  return $("#calendar ." + (+day)).append(holiday);
                }
              });
            })(day, country, idx));
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Calendar;

  })();

}).call(this);
