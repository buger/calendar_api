// Generated by CoffeeScript 1.3.3
(function() {
  var Holidays, async_memoise,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.countries = {
    'RU': {
      'name': 'Russian Federation',
      'code': 'russia'
    },
    'US': {
      'name': 'United States of America',
      'code': 'us'
    },
    'UA': {
      'name': 'Ukraine',
      'code': 'ukraine'
    },
    'CA': {
      'name': 'Canada',
      'code': 'canada'
    },
    'RO': {
      'name': 'Romania',
      'code': 'romania'
    },
    'UK': {
      'name': 'United Kingdom',
      'code': 'uk'
    }
  };

  async_memoise = function(func) {
    var memo;
    memo = {};
    return function() {
      var args, callback, key;
      args = Array.prototype.slice.call(arguments);
      key = args.slice();
      callback = key.splice(key.length - 1, 1)[0];
      if (memo[key]) {
        if (typeof memo[key] === "function") {
          return memo[key].queue.push(callback);
        } else {
          return callback(memo[key]);
        }
      }
      memo[key] = function(resp) {
        var f, _i, _len, _ref;
        _ref = memo[key].queue;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          f(resp);
        }
        return memo[key] = resp;
      };
      memo[key].queue = [callback];
      args[args.length - 1] = memo[key];
      return func.apply(this, args);
    };
  };

  Holidays = (function() {

    function Holidays() {
      this.getHolidays = async_memoise(this.getHolidays);
    }

    Holidays.prototype.isHoliday = function(date, country_code, callback) {
      var country, year;
      country = countries[country_code];
      year = date.getFullYear();
      date = date.stripTime();
      country.weekends || (country.weekends = [0, 6]);
      return this.getHolidays(country.code, year, function(holidays) {
        var _ref, _ref1;
        if ((_ref = date.getDay(), __indexOf.call(country.weekends, _ref) >= 0) && (((_ref1 = holidays[+date]) != null ? _ref1.type : void 0) != null) !== "Working day (moved weekend)") {
          return callback({
            name: "Weekends",
            type: "Weekends"
          });
        } else if (holidays[+date]) {
          return callback(holidays[+date]);
        } else {
          return callback();
        }
      });
    };

    Holidays.prototype.getHolidays = function(country_code, year, callback) {
      var _this = this;
      return $.getJSON("/data/" + country_code + "." + year + ".json").success(function(data) {
        var day, holidays, _i, _len, _ref;
        holidays = {};
        _ref = data.holidays;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          day = _ref[_i];
          holidays[day[0]] = {
            name: day[1],
            type: day[2]
          };
        }
        return callback(holidays);
      }).error(function() {
        return callback({});
      });
    };

    return Holidays;

  })();

  this.Holidays = new Holidays;

}).call(this);
