// Generated by CoffeeScript 1.3.3
(function() {
  var calendar;

  calendar = null;

  QUnit.testStart(function() {
    return calendar = new Calendar;
  });

  module("Date functions");

  test("Date strip time", function() {
    var date, strippedDate;
    date = new Date;
    strippedDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    return equal(+date.stripTime(), +strippedDate);
  });

  module("Calendar utils");

  test("Calendar format hour", function() {
    equal(calendar.formatHour(25), 1, "overflow");
    equal(calendar.formatHour(-1), 23, "negative");
    equal(calendar.formatHour(24), 0, "midnight");
    return equal(calendar.formatHour(16), 16, "normal");
  });

  test("Availabe hour, default", function() {
    ok(calendar.isAvailableHour(11), "default available");
    ok(!calendar.isAvailableHour(9), "default dnd");
    ok(calendar.isAvailableHour(19), "default available evening");
    return ok(!calendar.isAvailableHour(21), "default dnd evening");
  });

  test("Availabe hour, range", function() {
    var range;
    range = "10-17";
    ok(calendar.isAvailableHour(11, range));
    ok(!calendar.isAvailableHour(9, range));
    return ok(!calendar.isAvailableHour(17, range));
  });

  test("Availabe hour, multiple-range", function() {
    var range;
    range = "10-13,14-18";
    ok(calendar.isAvailableHour(11, range));
    ok(!calendar.isAvailableHour(13, range));
    return ok(calendar.isAvailableHour(15, range));
  });

  module("Holidays");

  test("Should know holiday", function() {
    var finished;
    stop();
    finished = _.after(7, function() {
      return start();
    });
    Holidays.isHoliday(new Date(2012, 0, 1), 'RU', function(name) {
      equal(name, "New Year's Day");
      return finished();
    });
    Holidays.isHoliday(new Date(2012, 0, 9), 'RU', function(name) {
      equal(name, "New Year Holiday Week", "Holiday moved from weekends");
      return finished();
    });
    Holidays.isHoliday(new Date(2012, 0, 11), 'RU', function(name) {
      ok(name === void 0, "Work day");
      return finished();
    });
    Holidays.isHoliday(new Date(2012, 0, 14), 'RU', function(name) {
      equal(name, "Old New Year");
      return finished();
    });
    Holidays.isHoliday(new Date(2012, 0, 15), 'RU', function(name) {
      equal(name, "Weekends");
      return finished();
    });
    Holidays.isHoliday(new Date(2012, 0, 16), 'RU', function(name) {
      equal(name, void 0, "Work day");
      return finished();
    });
    return Holidays.isHoliday(new Date(2012, 4, 1), 'UA', function(name) {
      equal(name, "National Labour Day");
      return finished();
    });
  });

  test("Computed holidays", function() {
    var finished;
    stop();
    finished = _.after(6, function() {
      return start();
    });
    Holidays.isHoliday(new Date(2012, 3, 14), 'UA', function(name) {
      equal(name, "Weekends");
      return finished();
    });
    Holidays.isHoliday(new Date(2012, 3, 15), 'UA', function(name) {
      equal(name, "Orthodox Christian Easter");
      return finished();
    });
    Holidays.isHoliday(new Date(2012, 3, 16), 'UA', function(name) {
      equal(name, "Orthodox Christian Easter");
      return finished();
    });
    Holidays.isHoliday(new Date(2012, 5, 3), 'UA', function(name) {
      equal(name, "Orthodox Pentecost");
      return finished();
    });
    Holidays.isHoliday(new Date(2012, 5, 4), 'UA', function(name) {
      equal(name, "Orthodox Pentecost");
      return finished();
    });
    return Holidays.isHoliday(new Date(2012, 5, 5), 'UA', function(name) {
      equal(name, void 0);
      return finished();
    });
  });

  test("Computed holidays, returns date", function() {
    var finished;
    stop();
    finished = _.after(2, function() {
      return start();
    });
    Holidays.isHoliday(new Date(2014, 8, 1), 'CA', function(name) {
      equal(name, "Labour Day");
      return finished();
    });
    return Holidays.isHoliday(new Date(2012, 8, 3), 'CA', function(name) {
      equal(name, "Labour Day");
      return finished();
    });
  });

  /*
  test "Print Ukraine holidays", ->
      years = [2010,2011,2012,2013,2014]
  
      for year in years
          holidays = []
  
          for name, day of Holidays.list()['UA']
              if typeof day is "function"
                  try
                      day = day(new Date(year, 1, 1))
                  catch e
                      day = 'undefined'
  
              [day, length] = day.split('-')
              length ?= 1
              length = parseInt(length)
                  
              date = +Holidays.genDate(day, new Date(year, 1, 1))
  
              continue if isNaN(date)
  
              for l in [1..length]
                  holidays.push [date, name, "National holiday"]
  
          console.warn year, JSON.stringify(holidays)
  */


}).call(this);
